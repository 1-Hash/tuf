"""
<Program Name>
  ed25519_key.py

<Author>
  Vladimir Diaz <vladimir.v.diaz@gmail.com>

<Started>
  September 24, 2013.

<Copyright>
  See LICENSE for licensing information.

<Purpose>
  The goal of this module is to support ed25519 signatures.  ed25519 is an
  elliptic-curve public key signature scheme, where signatures are 64 bytes and
  public keys only 32 bytes:  http://ed25519.cr.yp.to/
  
  'tuf/ed25519_key.py' calls 'ed25519/ed25519.py', which is the Python
  implementation of ed25519 provided by the author:
  http://ed25519.cr.yp.to/software.html
  
  The ed25519-related functions included here are generate(), create_signature()
  and verify_signature().  The 'ed25519' package used by this module
  generates the actual ed25519 keys and the functions listed above can be viewed
  as an easy-to-use public interface.  Additional functions contained here
  include create_in_metadata_format() and create_from_metadata_format().  These
  last two functions produce or use ed25519 keys compatible with the key
  structures listed in TUF Metadata files.  The generate() function returns a
  dictionary containing all the information needed of ed25519 keys, such as
  public and private keys, keyIDs, and an idenfier.  create_signature() and
  verify_signature() are supplemental functions used for generating ed25519
  signatures and verifying them.
  
  Key IDs are used as identifiers for keys (e.g., RSA key).  They are the
  hexadecimal representation of the hash of key object (specifically, the key
  object containing only the public key).  Review 'ed25519_key.py' and the
  '_get_keyid()' function to see precisely how keyids are generated.  One may
  get the keyid of a key object by simply accessing the dictionary's 'keyid'
  key (i.e., ed25519_key_dict['keyid']).

 """

# Required for hexadecimal conversions.  Signatures are hexlified.
import binascii

# Generate OS-specific randomness suitable for cryptographic use with
# os.urandom.
# http://docs.python.org/2/library/os.html#miscellaneous-functions
import os

# Import the python implementation of the ed25519 algorithm that is provided by
# the author.  Note: This implementation is very slow and does not include
# protection against side-channel attacks according to the author.  Verifying
# signatures can take approximately 5 seconds on a intel core 2 duo @
# 2.2 ghz x 2).  http://ed25519.cr.yp.to/software.html   
import ed25519.ed25519

import tuf

# Digest objects needed to generate hashes.
import tuf.hash

# Perform object format-checking.
import tuf.formats

_KEY_ID_HASH_ALGORITHM = 'sha256'


def generate():
  """
  <Purpose> 
    Generate an ed25519 pseed key ('sk') and public key ('pk').
    In addition, a keyid used as an identifier for ed25519 keys is generated.
    The object returned conforms to 'tuf.formats.ED25519KEY_SCHEMA' and has the
    form:
    {'keytype': 'ed25519',
     'keyid': keyid,
     'keyval': {'public': '\xb3\x17c\xda\x80\xed`F\xcc\xe4 ...',
                'private': '\xd7D\xb9b\xdf\xf6*\xa1\xbb\x19 ...'}}
    
    The public and private keys are strings.  An ed25519 seed key is a random
    32-byte value.  Public keys are also 32 bytes.

  <Arguments>
    None.

  <Exceptions>
    NotImplementedError, if a randomness source is not found.

    ValueError, if an exception occurs after calling the RSA key generation
    routine.  'bits' must be a multiple of 256.  The 'ValueError' exception is
    raised by the key generation function of the cryptography library called.

  <Side Effects>
    The ed25519 keys are generated by first creating a random 32-byte value
    'sk' with os.urandom() and then calling ed25519's ed25519.25519.publickey(sk).

  <Returns>
    A dictionary containing the ed25519 keys and other identifying information.
    Conforms to 'tuf.formats.ED25519KEY_SCHEMA'.
  
  """

  # Begin building the ed25519 key dictionary. 
  ed25519_key_dict = {}
  keytype = 'ed25519'
 
  # Generate ed25519's seed key by calling os.urandom().  The random bytes
  # returned should be suitable for cryptographic use and is OS-specific.
  # Raise 'NotImplementedError' if a randomness source is not found.
  # ed25519 seed keys are fixed at 32 bytes (256-bit keys).
  # http://blog.mozilla.org/warner/2011/11/29/ed25519-keys/ 
  ed25519_seed_key = os.urandom(32)

  # Generate the public key.  The 'ed25519.ed25519.py' module performs
  # the actual key generation.
  ed25519_public_key = ed25519.ed25519.publickey(ed25519_seed_key)
  
  # Generate the keyid for the ed25519 key dict.  'key_value' corresponds to the
  # 'keyval' entry of the 'ED25519KEY_SCHEMA' dictionary.  The seed key
  # information is not included in the generation of the 'keyid' identifier.
  key_value = {'public': ed25519_public_key,
               'private': ''}
  keyid = _get_keyid(key_value)

  # Build the 'ed25519_key_dict' dictionary.  Update 'key_value' with the
  # ed25519 seed key prior to adding 'key_value' to 'ed25519_key_dict'.
  key_value['private'] = ed25519_seed_key 

  ed25519_key_dict['keytype'] = keytype
  ed25519_key_dict['keyid'] = keyid
  ed25519_key_dict['keyval'] = key_value

  return ed25519_key_dict





def create_in_metadata_format(key_value, private=False):
  """
  <Purpose>
    Return a dictionary conformant to 'tuf.formats.KEY_SCHEMA'.
    If 'private' is True, include the private key.  The dictionary
    returned has the form:
    {'keytype': 'ed25519',
     'keyval': {'public': '\xb3\x17c\xda\x80\xed`F\xcc\xe4 ...',
                'private': '\xd7D\xb9b\xdf\xf6*\xa1\xbb\x19 ...'}}
    
    or if 'private' is False:

    {'keytype': 'rsa',
     'keyval': {'public': '\xb3\x17c\xda\x80\xed`F\xcc\xe4 ...',
                'private': ''}}
    
    The private and public keys are 32 bytes.
    
    ed25519 keys are stored in Metadata files (e.g., root.txt) in the format
    returned by this function.
  
  <Arguments>
    key_value:
      A dictionary containing a seed and public ed25519 key.
      'key_value' is of the form:

      {'public': '\xb3\x17c\xda\x80\xed`F\xcc\xe4 ...',
       'private': '\xd7D\xb9b\xdf\xf6*\xa1\xbb\x19 ...'}
      conformat to 'tuf.formats.KEYVAL_SCHEMA'.

    private:
      Indicates if the private key should be included in the
      returned dictionary.

  <Exceptions>
    tuf.FormatError, if 'key_value' does not conform to 
    'tuf.formats.KEYVAL_SCHEMA'.

  <Side Effects>
    None.

  <Returns>
    A 'KEY_SCHEMA' dictionary.

  """
	

  # Does 'key_value' have the correct format?
  # This check will ensure 'key_value' has the appropriate number
  # of objects and object types, and that all dict keys are properly named.
  # Raise 'tuf.FormatError' if the check fails.
  tuf.formats.KEYVAL_SCHEMA.check_match(key_value)

  if private is True and key_value['private']:
    return {'keytype': 'ed25519', 'keyval': key_value}
  else:
    public_key_value = {'public': key_value['public'], 'private': ''}
    return {'keytype': 'ed25519', 'keyval': public_key_value}





def create_from_metadata_format(key_metadata):
  """
  <Purpose>
    Construct an ed25519 key dictionary (i.e., tuf.formats.ED25519KEY_SCHEMA)
    from 'key_metadata'.  The dict returned by this function has the exact
    format as the dict returned by generate().  It is of the form:
   
    {'keytype': 'ed25519',
     'keyid': keyid,
     'keyval': {'public': '\xb3\x17c\xda\x80\xed`F\xcc\xe4 ...',
                'private': '\xd7D\xb9b\xdf\xf6*\xa1\xbb\x19 ...'}}

    The public and private keys are 32-byte strings.

    ed25519 key dictionaries in 'ED25519KEY_SCHEMA' format should be used by
    modules storing a collection of keys, such as a keydb and keystore.
    ed25519 keys as stored in metadata files use a different format, so this 
    function should be called if an ed25519 key is extracted from one of these 
    metadata files and needs converting.  Generate() creates an entirely
    new key and returns it in the format appropriate for 'keydb.py' and
    'keystore.py'.

  <Arguments>
    key_metadata:
      The ed25519 key dictionary as stored in Metadata files, conforming to
      'tuf.formats.KEY_SCHEMA'.  It has the form:
      
      {'keytype': 'ed25519',
       'keyval': {'public': '\xb3\x17c\xda\x80\xed`F\xcc\xe4 ...',
                  'private': '\xd7D\xb9b\xdf\xf6*\xa1\xbb\x19 ...'}}

  <Exceptions>
    tuf.FormatError, if 'key_metadata' does not conform to
    'tuf.formats.KEY_SCHEMA'.

  <Side Effects>
    None.

  <Returns>
    A dictionary containing the ed25519 keys and other identifying information.

  """


  # Does 'key_metadata' have the correct format?
  # This check will ensure 'key_metadata' has the appropriate number
  # of objects and object types, and that all dict keys are properly named.
  # Raise 'tuf.FormatError' if the check fails.
  tuf.formats.KEY_SCHEMA.check_match(key_metadata)

  # Construct the dictionary to be returned.
  ed25519_key_dict = {}
  keytype = 'ed25519'
  key_value = key_metadata['keyval']

  # Convert 'key_value' to 'tuf.formats.KEY_SCHEMA' and generate its hash
  # The hash is in hexdigest form. 
  keyid = _get_keyid(key_value)

  # We now have all the required key values.  Build 'ed25519_key_dict'.
  ed25519_key_dict['keytype'] = keytype
  ed25519_key_dict['keyid'] = keyid
  ed25519_key_dict['keyval'] = key_value

  return ed25519_key_dict





def _get_keyid(key_value):
  """Return the keyid for 'key_value'."""

  # 'keyid' will be generated from an object conformant to 'KEY_SCHEMA',
  # which is the format Metadata files (e.g., root.txt) store keys.
  # 'create_in_metadata_format()' returns the object needed by _get_keyid().
  ed25519_key_meta = create_in_metadata_format(key_value, private=False)

  # Convert the ed25519 key to JSON Canonical format suitable for adding
  # to digest objects.
  ed25519_key_update_data = tuf.formats.encode_canonical(ed25519_key_meta)

  # Create a digest object and call update(), using the JSON 
  # canonical format of 'ed25519_key_meta' as the update data.
  digest_object = tuf.hash.digest(_KEY_ID_HASH_ALGORITHM)
  digest_object.update(ed25519_key_update_data)

  # 'keyid' becomes the hexadecimal representation of the hash.  
  keyid = digest_object.hexdigest()

  return keyid





def create_signature(ed25519_key_dict, data):
  """
  <Purpose>
    Return a signature dictionary of the form:
    {'keyid': keyid,
     'method': 'ed25519-python',
     'sig': sig}.

    The signing process will use the public and seed key
    ed25519_key_dict['keyval']['private'],
    ed25519_key_dict['keyval']['public']
    
    and 'data' to generate the signature.

  <Arguments>
    ed25519_key_dict:
      A dictionary containing the ed25519 keys and other identifying information.
      'ed25519_key_dict' has the form:
    
      {'keytype': 'ed25519',
       'keyid': keyid,
       'keyval': {'public': '\xb3\x17c\xda\x80\xed`F\xcc\xe4 ...',
                  'private': '\xd7D\xb9b\xdf\xf6*\xa1\xbb\x19 ...'}}

      The public and private keys are 32-byte strings.

    data:
      Data object used by create_signature() to generate the signature.

  <Exceptions>
    TypeError, if a private key is not defined for 'ed25519_key_dict'.

    tuf.FormatError, if an incorrect format is found for the
    'ed25519_key_dict' object.

  <Side Effects>
    'ed25519.ed25519.signature() called to generate the actual signature.

  <Returns>
    A signature dictionary conformat to 'tuf.format.SIGNATURE_SCHEMA'.
    ed25519 signatures are 64 bytes, however, the hexlified signature is
    stored in the dictionary returned.

  """

  # Does 'ed25519_key_dict' have the correct format?
  # This check will ensure 'ed25519_key_dict' has the appropriate number
  # of objects and object types, and that all dict keys are properly named.
  # Raise 'tuf.FormatError' if the check fails.
  tuf.formats.ED25519KEY_SCHEMA.check_match(ed25519_key_dict)

  # Signing the 'data' object requires a seed and public key.
  # 'ed25519.ed25519.py' generates the actual 64-byte signature in pure Python. 
  signature = {}
  private_key = ed25519_key_dict['keyval']['private']
  public_key = ed25519_key_dict['keyval']['public']

  keyid = ed25519_key_dict['keyid']
  method = 'ed25519-python'
  sig = None
 
  # Verify the signature, but only if the private key has been set.  The private
  # key is a NULL string if unset.  Although it may be clearer to explicit check
  # that 'private_key' is not '', we can/should check for a value and not
  # compare identities with the 'is' keyword. 
  if len(private_key):
    # ed25519.ed25519.signature() requires both the seed and public keys.
    # It calculates the SHA512 of the seed key, which is 32 bytes. 
    try:
      sig = ed25519.ed25519.signature(data, private_key, public_key)
    except Exception, e:
      message = 'An ed25519 signature could not be generated.'
      raise tuf.CryptoError(message)
  else:
    message = 'The required private key is not defined for "ed25519_key_dict".'
    raise TypeError(message)

  # Build the signature dictionary to be returned.
  # The hexadecimal representation of 'sig' is stored in the signature.
  signature['keyid'] = keyid
  signature['method'] = method
  signature['sig'] = binascii.hexlify(sig)

  return signature





def verify_signature(ed25519_key_dict, signature, data):
  """
  <Purpose>
    Determine whether the seed key belonging to 'ed25519_key_dict' produced
    'signature'.  verify_signature() will use the public key found in
    'ed25519_key_dict', the 'method' and 'sig' objects contained in 'signature',
    and 'data' to complete the verification.  Type-checking performed on both
    'ed25519_key_dict' and 'signature'.

  <Arguments>
    ed25519_key_dict:
      A dictionary containing the ed25519 keys and other identifying information.
      'ed25519_key_dict' has the form:
     
      {'keytype': 'ed25519',
       'keyid': keyid,
       'keyval': {'public': '\xb3\x17c\xda\x80\xed`F\xcc\xe4 ...',
                  'private': '\xd7D\xb9b\xdf\xf6*\xa1\xbb\x19 ...'}}

      The public and private keys are 32-byte strings.
      
    signature:
      The signature dictionary produced by tuf.ed25519_key.create_signature().
      'signature' has the form:
      {'keyid': keyid, 'method': 'method', 'sig': sig}.  Conformant to
      'tuf.formats.SIGNATURE_SCHEMA'.
      
    data:
      Data object used by tuf.ed25519_key.create_signature() to generate
      'signature'.  'data' is needed here to verify the signature.

  <Exceptions>
    tuf.UnknownMethodError.  Raised if the signing method used by
    'signature' is not one supported by tuf.ed25519_key.create_signature().
    
    tuf.FormatError. Raised if either 'ed25519_key_dict'
    or 'signature' do not match their respective tuf.formats schema.
    'ed25519_key_dict' must conform to 'tuf.formats.ED25519KEY_SCHEMA'.
    'signature' must conform to 'tuf.formats.SIGNATURE_SCHEMA'.

  <Side Effects>
    ed25519.ed25519.checkvalid() called to do the actual verification.

  <Returns>
    Boolean.  True if the signature is valid, False otherwise.

  """

  # Does 'ed25519_key_dict' have the correct format?
  # This check will ensure 'ed25519_key_dict' has the appropriate number
  # of objects and object types, and that all dict keys are properly named.
  # Raise 'tuf.FormatError' if the check fails.
  tuf.formats.ED25519KEY_SCHEMA.check_match(ed25519_key_dict)

  # Does 'signature' have the correct format?
  tuf.formats.SIGNATURE_SCHEMA.check_match(signature)

  # Using the public key belonging to 'ed25519_key_dict'
  # (i.e., ed25519_key_dict['keyval']['public']), verify whether 'signature'
  # was produced by ed25519_key_dict's corresponding seed key
  # ed25519_key_dict['keyval']['private'].  Before returning the Boolean result,
  # ensure 'ed25519-python' was used as the signing method.
  method = signature['method']
  sig = signature['sig']
  public_key = ed25519_key_dict['keyval']['public']
  valid_signature = False

  if method == 'ed25519-python':
    try:
      # The metadata stores signatures in hex.  Unhexlify and verify the
      # signature.
      signature = binascii.unhexlify(sig)
      ed25519.ed25519.checkvalid(signature, data, public_key)
      valid_signature = True
    except Exception, e:
      message = 'The ed25519 signature could not be verified.'
      raise tuf.CryptoError(message)
  else:
    raise tuf.UnknownMethodError(method)

  return valid_signature 
